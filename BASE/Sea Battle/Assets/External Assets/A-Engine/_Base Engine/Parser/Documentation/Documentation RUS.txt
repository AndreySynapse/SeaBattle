Модуль предназначен для упрощения работы с файлами и их данными, создавая обертку над стандартными средствами.

Подключение модуля: using AEngine.Parser;

1) Класс FilePath.

FilePath предназначен для работы с путями к файлу, генерируя актуальный путь в соответствии с предполагаемой локацией. Содержит единственный метод:

FilePaht.GetPath(LocationKinds location, OperationKinds operation, string directory, string shortFileName, string extension)

location - расположение файла. Получаемый путь будет отличаться, в зависимости от этой опции. Возможные значения:
- FreeLocation - полный системный путь или путь с корневой папки проекта (C:/MyFolder/MyFile.txt  SomeFolderInProject/MyFile.txt)
- Assets - путь к папке Assets, где располагаются практически все файлы проекта. Актуально для работы из редактора.
- Resources - папка Resources в проекте. Актуально для работы из редактора и считывание данный рантайм.
- Cache - работа с кэшем. Это назначаемая системой папка, куда приложение может записывать или считывать данные. Для каждой системы свой путь.
Кэш отлично поддерживается мобильными платформами iOS, Android, отлично работает с Windows, Linus, Mac. Актуально в основном рантайм.

operation - тип операции над файлом. Считывание данных или запись. Как правило путь один и тот же для любых значений этого параметра.
Отличие есть только для локации Resources. При считывании данных из этой папки в Unity используется укороченный путь и не нужны расширения файла.
Так что при значении location в Resources путь будет отличаться в зависимости от значения параметра operation.

directory - путь к файлу. Как правило, это путь, начиная с текущей локации файла. Если файл находится прямо в локации, можно указать пустую строку.
В случае с location в FreeLocation - можно указать полный системный путь. Путь может оканчиваться слешами (любым из) или нет - значение это не имеет.

shortFileName - имя файла без расширения.

extension - расширение файла. Можно передавать строку с точкой или без. Если расширение не нужно (считывание данных из Resources), можно передать
пустую строку. Однако работать метод будет правильно и если передавать расширение файла.



2) Класс PathConfiguration.

Компонент-оболочка над FilePath. Позволяет получить путь к файлу, в зависимости от локации файла. Настройки осуществляются в редакторе Unity.

Содержит методы:
string GetPath() - возвращает путь к файлу в соответствии к настройкам в редакторе
bool Exists() - проверяет наличие файла по предполагаемому пути, в соответствии с настройками в редакторе



3) Класс XmlParser.

Содержит ряд методов, упрощающих работу с xml файлом. Хорошо подходит для считывания любого xml документа с корня вглубь структуры документа.
Нужно подключение библиотеки System.xml

XmlDocument LoadFromFile(string path) - загрузка xml документа из любой локации, кроме Resources.
XmlDocument LoadFromResources(string path) - загрузка xml документа из Resources.

Для сохранения документа используется стандартные средства: xmlDocument.Save(path);

Во всех случаях путь легко получается с помощью классов FilePath или PathConfiguration.

Теги считываются с корня xml документа вглубь. Для этого есть все методы: проверка и получение корневого тега. Проверка наличие дочернего тега.
Получение первого или всех дочерних тегов по имени, получение первого или всех дочерних тегов по их имени и значению некоторо аттрибута.
Теги - стандартный класс XmlNode языка C#.

При необходимости создания и сохранения xml документа, можно использовать стандартные средства:
- Создание xml документа: XmlDocument document = new XmlDocument();
- Получение тегов: document.CreateElement(name);
- Задание атрибутов новым тегам и последовательное их присоединение к документу или другому тегу как дочерние элементы:
document.AppendChild(tag);
xmlNode.AppendChild(tag);

XmlParser содержит два метода, слегка упрощающие эту работу:
CreateRootTag - создает тег и присоединяет его к документу
CreateChildTag - создает тег и присоединяет его к родительскому тегу.

Также есть метод, упрощающий добавление аттрибута к тегу:
AddAttribute
